#!/bin/sh

unset SSH_AUTH_SOCK
SOURCE=$1
DEST=$2
PORT=$3

## When we've got a tty, show some transfer stats
## otherwise just pass through the data (using cat)
if [ -t 1 ] ; then
  PROGRESS_CMD=pv
else
  PROGRESS_CMD=cat
fi

command -v $PROGRESS_CMD >/dev/null 2>&1 || { echo >&2 "'$PROGRESS_CMD' is a required command. Please install it. Aborting."; exit 1; }
command -v btrfs >/dev/null 2>&1 || { echo >&2 "'btrfs' is a required command. Please install it. Aborting."; exit 1; }
command -v ssh >/dev/null 2>&1 || { echo >&2 "'ssh' is a required command. Please install it. Aborting."; exit 1; }

if [ -z "$SOURCE" ]; then
  echo "No source set (first argument - should be full path)"
  exit 1
fi

if [ -z "$DEST" ]; then
  echo "No dest set (second argument - should be in a form suitable for the ssh command)"
  exit 1
fi

if [ $(stat --format=%i $SOURCE) -ne 256 ]; then
  echo "$SOURCE is not a btrfs subvolume, sorry."
  exit 1
fi

MAXDAILY=5
KEEPDAILY=1
TODAY=$(date +%Y%m%d)
for i in {0..7}; do ((keep[$(date +%Y%m%d -d "-$i day")]++)); done

HOSTNAME=$(hostname)
BASEDIR=Backup
NOLEADINGSLASH=$(echo $SOURCE | sed -s 's|^\/||g')
BACKUP=$BASEDIR/$HOSTNAME/$NOLEADINGSLASH
SSH="ssh -i $HOME/.ssh/id_rsa_backup"
if [ ! -z "$PORT" ]; then
  SSH="$SSH -p $PORT"
fi
SSH="$SSH -C $DEST"

echo "BACKUP: $BACKUP"
echo "SSH CMD: $SSH"

if [ ! -e "$SOURCE/.backup-latest" ]; then
  echo "Creating initial snapshot at $SOURCE/.backup-latest"
  sudo btrfs subvolume snapshot -r $SOURCE $SOURCE/.backup-latest
  sync
fi

if $SSH exists $BACKUP; then
  echo "Snapshotting $SOURCE to $SOURCE/.backup-new"
  if [ -e $SOURCE/.backup-new ]; then
    sudo btrfs subvolume delete $SOURCE/.backup-new
  fi
  sudo btrfs subvolume snapshot -r $SOURCE $SOURCE/.backup-new
  sync
  echo "Sending diff between $SOURCE/.backup-latest and $SOURCE/.backup-new to $DEST:$BACKUP"
  sudo btrfs send -p $SOURCE/.backup-latest $SOURCE/.backup-new | $PROGRESS_CMD | $SSH "receive $BACKUP"
else
  echo "Setting up remote $DEST"
  $SSH setup $BACKUP
  echo "Sending initial snapshot to $DEST:$BACKUP since no preexisting snapshot was found"
  sudo btrfs send $SOURCE/.backup-latest | $PROGRESS_CMD | $SSH "receive $BACKUP"
fi

if [ -e $SOURCE/.backup-new ]; then
  latest=$(date +%Y%m%d%H%M -d @$(stat -c %Y $SOURCE/.backup-latest))
  echo "Moving old local backup $SOURCE/.backup-latest to $SOURCE/.backup-$latest"
  sudo mv $SOURCE/.backup-latest $SOURCE/.backup-$latest

  echo "Moving new local backup $SOURCE/.backup-new to $SOURCE/.backup-latest..."
  sudo mv $SOURCE/.backup-new $SOURCE/.backup-latest

  echo "Cleaning out old daily local snapshots"
  for snap in $(ls -da $SOURCE/.backup-$TODAY* | sort -r | tail -n +$((MAXDAILY+1))); do
    echo "Removing old local daily snapshot: '$snap'"
    echo "sudo btrfs subvolume delete $snap"
    sudo btrfs subvolume delete $snap
  done

  echo "Cleaning out local snapshots older than today, keeping a weeks worth ($KEEPDAILY per day)"
  for snap in $(ls -da $SOURCE/.backup-2* | sort -r); do
    name=$(basename $snap)
    when=$(echo $name | sed 's|\.backup-||g')
    day=$(echo $when | cut -c1-8)
    if [ "$day" = "$TODAY" ]; then
      echo "Skip local $snap (today)"
      continue
    fi
    k=${keep[$day]}
    if [ "$k" != "1" ]; then
      echo "Removing local snap older than a week: $snap"
      echo "sudo btrfs subvolume delete $snap"
      sudo btrfs subvolume delete $snap
    else
      for dailysnap in $(ls -da $SOURCE/.backup-$day* | sort -r | tail -n +$((KEEPDAILY+1))); do
        echo "Remove old local snap $dailysnap (keeping one per day)"
        echo "sudo btrfs subvolume delete $dailysnap"
        sudo btrfs subvolume delete $dailysnap
      done
    fi
  done

fi
